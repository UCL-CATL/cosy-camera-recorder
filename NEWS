News in 0.4, 2017-03-14
-----------------------
* CheeseCamera: change GstEncodingProfile to MPEG-4 in MP4 container.

  It took some time to figure out how to do it properly. Since it didn't work
  after my first attempt, and since I didn't know what was going wrong, I've
  investigated two other solutions, which permitted me to better learn
  GStreamer:

	* Creating a dynamic pipeline with only basic GStreamer elements:
	  v4l2src (the camera), then a tee with one branch to display the
	  image, and the other branch added on demand to record the video.
	  Since the pipeline is in the Playing state (the data is flowing
	  through the elements), before adding the recording branch, probes
	  must be added to block the data on that side of the tee element. Then
	  once the new branch is linked, the probe must be removed to let the
	  data flow on that branch. To stop the recording, a blocking probe
	  must also be added, then the data needs to be flushed to not have a
	  corrupted video file, and then the recording branch can be removed.
	  One problem encountered is that caps negotiation (the formats of the
	  data) is not performed correctly when the recording branch is
	  missing: when we try to add the recording branch, the format chosen
	  previously is not the good one. I think that one way to solve that is
	  to add a capsfilter element, taking the intersection of the three
	  branches around the tee element.

	  Unfinished, more complicated than I thought.

	  Update: gstproxy (proxysink + proxysrc) can be useful to simplify
	  this solution with the dynamic pipeline. See:
	  http://blog.nirbheek.in/2018/02/decoupling-gstreamer-pipelines.html

	* Using the camerabin GStreamer element. CheeseCamera also uses
	  camerabin. camerabin is an intermediate solution between basic
	  GStreamer elements and the libcheese. camerabin is a bit lower-level
	  than libcheese, but is much easier to use than creating our own
	  dynamic pipeline.

	  To configure the video encoding format, it's the same function as in
	  CheeseCamera, i.e. with a GstEncodingProfile, since in CheeseCamera
	  the GstEncodingProfile is also applied to the camerabin. With a
	  simpler usage of camerabin, it was easier to figure out the problem
	  with the GstEncodingProfile (and also after more GStreamer
	  documentation reading).

	  Unfinished/buggy: I have this error: Device '/dev/video0' is busy.
	  With the libcheese the same GstEncodingProfile works fine, I didn't
	  try to understand why. (camerabin works fine with its default video
	  format, the error happens only when trying to change the video
	  format). Multimedia is hard :-)

* Polish the program: better error messages, etc.
* Update Docker container.

News in 0.3, 2017-02-14
-----------------------
* Copy the code of libcheese, to be able to modify it for our needs. Remove the
  classes that we don't need, and remove some features from CheeseCamera, to
  have less code (and thus easier to understand). Note that at this point the
  modifications of libcheese are just code removal, the videos are still
  encoded in the wrong format.

News in 0.2, 2017-02-13
-----------------------
* Use the libcheese. The image of the camera is displayed in a GTK+ window, and
  starting/stopping video recordings with ZeroMQ requests work fine, except
  that the video is not encoded in the good format for Pupil Capture.

  Cheese is the GNOME webcam application, to take photos and videos, and apply
  effects. In cosy-camera-recorder we don't need to take photos nor apply
  effects, but the libcheese provides a convenient API, and it can be
  integrated into a GTK+ application. Unfortunately the libcheese was not
  developed as a "generic" shared library, a lot of the code is specific to the
  Cheese application (the use of GSettings inside the library, the hard-coded
  video format, things like that).

  https://wiki.gnome.org/Apps/Cheese

* Use the Autotools for the build system instead of basic Makefiles.

News in 0.1, 2017-01-17
-----------------------
* First version.
* Learn GStreamer basics.
* Be able to start/stop video recordings of a camera with ZeroMQ requests, but
  the image of the camera is not displayed on the screen.
